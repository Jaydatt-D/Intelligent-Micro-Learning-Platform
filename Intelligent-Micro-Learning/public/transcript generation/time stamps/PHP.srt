1
00:00:00,000 --> 00:00:05,000
Hey there, this is Kamal, and in this video, we're gonna learn the basics of PHP.

2
00:00:05,000 --> 00:00:07,000
So, let's get this started.

3
00:00:07,000 --> 00:00:10,000
So, before going further, let me clarify a few things.

4
00:00:10,000 --> 00:00:15,000
I'm assuming that you only have a basic idea or some of the concepts of programming languages,

5
00:00:15,000 --> 00:00:19,000
like variables, functions, loops, and conditional statements.

6
00:00:19,000 --> 00:00:24,000
So, if you have a basic idea of what these terms mean, then this video will be really easy for you.

7
00:00:24,000 --> 00:00:29,000
But if you have no idea what I'm talking about, then you might have a bit difficulty to understand what's going on,

8
00:00:29,000 --> 00:00:32,000
as I'm trying to explain all these things in a very short time.

9
00:00:32,000 --> 00:00:35,000
So, I'm not going to go too deep into each of these concepts.

10
00:00:35,000 --> 00:00:39,000
I'm just going to give a basic idea of what these do and how the syntax works and everything else.

11
00:00:39,000 --> 00:00:43,000
Even if you have no idea what this is, just follow along, and I think you'll be able to understand,

12
00:00:43,000 --> 00:00:47,000
as I'll try to explain everything as easy as possible for you to understand.

13
00:00:47,000 --> 00:00:49,000
Okay, so without wasting any more time, let's jump into it.

14
00:00:49,000 --> 00:00:52,000
Alright, so first things first, what is PHP?

15
00:00:52,000 --> 00:00:55,000
PHP stands for Hypertext Preprocessor.

16
00:00:55,000 --> 00:01:01,000
So, it's a server-side scripting language which is generally used to write scripts which run on the server.

17
00:01:01,000 --> 00:01:07,000
So, in simple terms, it's like a script which connects the front-end part with a back-end, that is the database.

18
00:01:07,000 --> 00:01:12,000
So, it's like if you want to do some operations on the data which is taken from the front-end,

19
00:01:12,000 --> 00:01:16,000
and maybe you want to take that information and place it in the database,

20
00:01:16,000 --> 00:01:23,000
then you're going to use PHP which connects with the database and executes queries or things onto the database.

21
00:01:23,000 --> 00:01:27,000
In a similar way, it's going to take the data from the database and display it onto the front-end part.

22
00:01:27,000 --> 00:01:33,000
So, it's like a bridge between these two, and PHP is a language which generally runs on servers.

23
00:01:33,000 --> 00:01:39,000
So, if you want to actually execute PHP on your computer, you have to have a server installed on your computer.

24
00:01:39,000 --> 00:01:45,000
There are many servers out there, but the one that I'm using right now for this video is XAMPP or XAMPP.

25
00:01:45,000 --> 00:01:50,000
So, it's a bundle of different softwares, and in that, a server is also present, it's an Apache server,

26
00:01:50,000 --> 00:01:55,000
and it also comes with PHP bundle, so you don't need to manually install PHP onto your system.

27
00:01:55,000 --> 00:01:58,000
So, if you install XAMPP, automatically everything will be set up for you.

28
00:01:58,000 --> 00:02:01,000
So, if you have no idea what XAMPP is and how to install it on your computer,

29
00:02:01,000 --> 00:02:03,000
I'll provide a link in the description down below.

30
00:02:03,000 --> 00:02:07,000
You can go to that link and see the video on how to install XAMPP, I've already done that.

31
00:02:07,000 --> 00:02:10,000
So, once I'm done installing that, then you can carry on from here.

32
00:02:10,000 --> 00:02:12,000
Alright, so now let's go into the project structure.

33
00:02:12,000 --> 00:02:18,000
So, in my Visual Studio code, what I'm going to do is I'm going to create a file and name it as practice.php.

34
00:02:18,000 --> 00:02:22,000
So, observe here that I'm trying to name practice.php.

35
00:02:22,000 --> 00:02:26,000
So, I'm giving .php extinction as this is a PHP file.

36
00:02:26,000 --> 00:02:32,000
Alright, the first thing that you have to know when it comes to PHP is that you have to write PHP inside a specific tag.

37
00:02:32,000 --> 00:02:34,000
So, it's something like this.

38
00:02:34,000 --> 00:02:39,000
So, this is the PHP tag, so this is the opening tag, and this is the closing tag.

39
00:02:39,000 --> 00:02:43,000
This implies that whatever is written in between these two tags is PHP.

40
00:02:43,000 --> 00:02:49,000
Everything else that is written outside of these two tags is not considered PHP even though the file is named as PHP.

41
00:02:49,000 --> 00:02:53,000
That is because you can write HTML inside of PHP as well.

42
00:02:53,000 --> 00:03:00,000
So, if you want, you can just type in the HTML code below here and you can place your PHP above the HTML as well.

43
00:03:00,000 --> 00:03:04,000
Or you can use PHP in between HTML as well.

44
00:03:04,000 --> 00:03:08,000
So, you have to specify these two tags whenever you're trying to use PHP.

45
00:03:08,000 --> 00:03:12,000
Alright, so the first thing that we're going to see is how to print data onto the screen.

46
00:03:12,000 --> 00:03:17,000
So, we're going to use a function called as echo.

47
00:03:17,000 --> 00:03:23,000
So, echo is a function which is generally used to print data onto the screen and this is its syntax.

48
00:03:23,000 --> 00:03:29,000
So, here I'm going to output a string and save it.

49
00:03:29,000 --> 00:03:36,000
So, now if you want to execute this, what you have to do is you have to go to your exam control panel and start the server.

50
00:03:36,000 --> 00:03:41,000
Once you've done that, then you have to go to your browser and type in localhost.

51
00:03:41,000 --> 00:03:48,000
So, I'm going to quickly go to the file that we had created earlier.

52
00:03:48,000 --> 00:03:54,000
Okay, so this is the file that we have. If I zoom in a bit, so you're able to see the text, right?

53
00:03:54,000 --> 00:03:57,000
So, we're using echo to print the data onto the screen.

54
00:03:57,000 --> 00:03:59,000
So, the second thing that we're going to see is comments.

55
00:03:59,000 --> 00:04:06,000
So, if you're going to create a single line comment in PHP, you have to give it two slashes and that is going to create a comment.

56
00:04:06,000 --> 00:04:09,000
So, if you're going to create a multi-line comment, you're going to type in.

57
00:04:09,000 --> 00:04:17,000
So, this is a multi-line comment. Anything that is placed in between will become a comment.

58
00:04:17,000 --> 00:04:20,000
So, next thing that we're going to see are variables.

59
00:04:20,000 --> 00:04:23,000
So, variables are like containers in which you can store data.

60
00:04:23,000 --> 00:04:29,000
In other languages like C, C++, Java, you have to specifically define the type of data that you want to store.

61
00:04:29,000 --> 00:04:35,000
If you want to store int or integer, you have to type in int or if you want to store strings, you have to type in string.

62
00:04:35,000 --> 00:04:39,000
But, here in PHP, you don't need to explicitly define what data type that you're going to use.

63
00:04:39,000 --> 00:04:44,000
You can just type in dollar a is equal to 10.

64
00:04:44,000 --> 00:04:51,000
Here, dollar represents that this is a variable and the value of 10 is being assigned to a.

65
00:04:51,000 --> 00:04:54,000
And, as you can see here, we haven't defined what data type a is.

66
00:04:54,000 --> 00:04:59,000
It's just going to take the value and automatically define its data type implicitly.

67
00:04:59,000 --> 00:05:01,000
You don't have to define that it's int.

68
00:05:01,000 --> 00:05:09,000
You can just give it as text as well or string or you can give it a float value as well.

69
00:05:09,000 --> 00:05:12,000
Anything is fine. Everything is accepted here.

70
00:05:12,000 --> 00:05:16,000
And, one more thing that you have to keep in mind is that you have to end each line with a semicolon.

71
00:05:16,000 --> 00:05:22,000
Semicolon is what defines the end of a line and that's the end of an instruction.

72
00:05:22,000 --> 00:05:26,000
Then, the interpreter or compiler can just go to the next line and execute that.

73
00:05:26,000 --> 00:05:28,000
So, now you can echo out the value.

74
00:05:28,000 --> 00:05:31,000
So, I'm going to echo out dollar a and save it.

75
00:05:31,000 --> 00:05:36,000
So, if you now go to the browser and refresh, as you can see here, 10 is being outputted.

76
00:05:36,000 --> 00:05:38,000
That's the value that we had assigned it.

77
00:05:38,000 --> 00:05:42,000
Let's echo out the value of b as well.

78
00:05:42,000 --> 00:05:48,000
And, I'm going to change the value of a to let's say.

79
00:05:48,000 --> 00:05:50,000
So, now if you save that and go to the browser.

80
00:05:50,000 --> 00:05:52,000
So, as you can see here, the text is being printed.

81
00:05:52,000 --> 00:05:56,000
There's no space here and the data is not being printed onto the next line.

82
00:05:56,000 --> 00:05:58,000
It's just being printed on a single line.

83
00:05:58,000 --> 00:06:02,000
So, if you want to change that, what you can do is, in between these two echo statements,

84
00:06:02,000 --> 00:06:06,000
you can echo out another statement and it's going to be a HTML tag.

85
00:06:06,000 --> 00:06:12,000
So, I'm going to echo out a br tag and save it.

86
00:06:12,000 --> 00:06:17,000
Now, if you go to the browser and refresh, as you can see here, 20 has been shifted to the next line.

87
00:06:17,000 --> 00:06:20,000
So, in this way, you can echo out HTML inside of PHP.

88
00:06:20,000 --> 00:06:28,000
So, if you want to echo, let's say, horizontal line, as you can see here, the line has been printed.

89
00:06:28,000 --> 00:06:33,000
Similarly, you can echo out multiple statements consisting of headings, paragraphs, links and all of that.

90
00:06:33,000 --> 00:06:35,000
Anything can be echoed out.

91
00:06:35,000 --> 00:06:37,000
So, the next thing that we're going to see are operations.

92
00:06:37,000 --> 00:06:46,000
So, I'm just going to quickly type in all the operations that we can generally use.

93
00:06:46,000 --> 00:06:51,000
So, these are the operations that we generally use inside of PHP or any other language in a sense.

94
00:06:51,000 --> 00:06:54,000
So, these are the basic operations that we use.

95
00:06:54,000 --> 00:07:01,000
So, what I'm doing here is that I'm just adding a to b and assigning that value to a variable called as $r.

96
00:07:01,000 --> 00:07:07,000
I'm doing the same thing here except I'm doing subtraction, then multiplication, division or you can do modular division as well.

97
00:07:07,000 --> 00:07:13,000
So, what I'm going to do is, I'm going to just change this from text to, let's say, a number 20 and save it.

98
00:07:13,000 --> 00:07:16,000
So, now I'm just going to comment out everything else except the addition part.

99
00:07:16,000 --> 00:07:22,000
And then below this, what I'm going to do is, I'm going to echo out the value of $r.

100
00:07:22,000 --> 00:07:26,000
We'll just echo out this as well. We don't need this and save it.

101
00:07:26,000 --> 00:07:30,000
As you can see here, 30 has been printed. That is 20 plus 10 is equal to 30.

102
00:07:30,000 --> 00:07:32,000
So, the same thing will happen with all the other operations as well.

103
00:07:32,000 --> 00:07:35,000
So, I'm just going to comment out this and do one more operation.

104
00:07:35,000 --> 00:07:39,000
So, I'm going to do the modular operation and save it and refresh.

105
00:07:39,000 --> 00:07:41,000
So, as you can see here, 10 is being outputted.

106
00:07:41,000 --> 00:07:49,000
So, now let's say instead of echoing out the variable directly, let's say you want to echo out some text before the variable or after the variable.

107
00:07:49,000 --> 00:07:53,000
And in between that, you want to actually echo out this variable as well.

108
00:07:53,000 --> 00:07:55,000
So, what you're going to do is that you're going to concatenate.

109
00:07:55,000 --> 00:07:57,000
So, what does that mean?

110
00:07:57,000 --> 00:07:59,000
So, I'm just going to first type the text.

111
00:07:59,000 --> 00:08:04,000
So, this is the result and give a colon space.

112
00:08:04,000 --> 00:08:10,000
Then what I'm going to do is, I'm going to give it dot and then I'm going to give the variable that you want to echo out.

113
00:08:10,000 --> 00:08:15,000
So, essentially what we're doing here is that we're concatenating this text with this variable.

114
00:08:15,000 --> 00:08:20,000
Concatenation means adding the data to the end or the starting, wherever you put it actually.

115
00:08:20,000 --> 00:08:22,000
So, it's like adding or extending the data itself.

116
00:08:22,000 --> 00:08:25,000
So, I'm just concatenating this string with this variable.

117
00:08:25,000 --> 00:08:28,000
If you want, you can add one more text here.

118
00:08:28,000 --> 00:08:32,000
Let's say, test something like that and just save it.

119
00:08:32,000 --> 00:08:35,000
And if you go to the browser and refresh.

120
00:08:35,000 --> 00:08:38,000
So, as you can see here, the result is being printed.

121
00:08:38,000 --> 00:08:44,000
Okay, so now let's comment this and the next thing that we're going to do is we're going to see conditional statements.

122
00:08:44,000 --> 00:08:52,000
So, by conditional statements, what I mean is that, let's say you want to write a logic where you want to execute a particular statement if something is true.

123
00:08:52,000 --> 00:08:56,000
If that is not true, then you're going to execute something else, right?

124
00:08:56,000 --> 00:09:12,000
So, let's say I have something like this.

125
00:09:12,000 --> 00:09:18,000
So, what we're doing is that we're checking if $a or that variable is greater than $b.

126
00:09:18,000 --> 00:09:21,000
If that is true, then execute this statement that is a is greater than b.

127
00:09:21,000 --> 00:09:24,000
If not, check if a is equivalent to b.

128
00:09:24,000 --> 00:09:26,000
If that is true, then execute this.

129
00:09:26,000 --> 00:09:31,000
Else, if both of these are not true, then you're going to execute this, which is a is smaller than b.

130
00:09:31,000 --> 00:09:35,000
So, if you observe here, we're using two equal to's and not single.

131
00:09:35,000 --> 00:09:40,000
That is because we generally use a single equal to when you're trying to actually assign a variable.

132
00:09:40,000 --> 00:09:43,000
As you can see here, we first did that operation, right?

133
00:09:43,000 --> 00:09:48,000
After we had done the operations on a and b, we're assigning that result value to a variable called $r.

134
00:09:48,000 --> 00:09:51,000
In that case, we're using an equal to to assign a variable.

135
00:09:51,000 --> 00:09:56,000
Here, we're using double equal to to check if both of these entities are equal or not.

136
00:09:56,000 --> 00:09:57,000
Okay, remember that.

137
00:09:57,000 --> 00:09:59,000
So, this is a simple FL structure.

138
00:09:59,000 --> 00:10:05,000
Now, let's comment this out and what we're going to do is we're going to execute this and go to the browser and refresh.

139
00:10:05,000 --> 00:10:08,000
And as you can see, it's showing that a is smaller than b.

140
00:10:08,000 --> 00:10:11,000
That is because the value of a is currently 10.

141
00:10:11,000 --> 00:10:12,000
What if we change it to 50?

142
00:10:12,000 --> 00:10:15,000
Now, let's go to the browser and refresh.

143
00:10:15,000 --> 00:10:17,000
As you can see, a is greater than b.

144
00:10:17,000 --> 00:10:23,000
Now, if it is equivalent, then let's save that and see that a is equal to b.

145
00:10:23,000 --> 00:10:25,000
So, the FL statements are working right now.

146
00:10:25,000 --> 00:10:27,000
So, I'm just going to comment this out, okay?

147
00:10:27,000 --> 00:10:30,000
So, the next thing that we're going to take a look at is arrays.

148
00:10:30,000 --> 00:10:33,000
So, an array is a data structure.

149
00:10:33,000 --> 00:10:36,000
So, if you have a computer science background, then you already know what arrays are.

150
00:10:36,000 --> 00:10:42,000
But if you have no idea what array is, in simple terms, an array is a collection of data, right?

151
00:10:42,000 --> 00:10:48,000
So, it's like a continuous stream of collection of data inside the computer's memory, okay?

152
00:10:48,000 --> 00:10:52,000
So, it's like a row in which you place all the data consecutively, right?

153
00:10:52,000 --> 00:11:02,000
So, the way that you define an array inside PHP is like this.

154
00:11:02,000 --> 00:11:04,000
So, I have a variable here called as index array.

155
00:11:04,000 --> 00:11:06,000
In that, I've defined three values.

156
00:11:06,000 --> 00:11:10,000
The first one is the character a, the second one is the character b, and the third one is the character c.

157
00:11:10,000 --> 00:11:13,000
So, as you can see here, all three of them are of similar data type.

158
00:11:13,000 --> 00:11:19,000
And in any other language like C or C++, you have to define an array which is of same data type, right?

159
00:11:19,000 --> 00:11:25,000
You cannot define an element inside of an array which is different from all the other elements inside that array.

160
00:11:25,000 --> 00:11:28,000
It's like you can't define it as one, two, three, four.

161
00:11:28,000 --> 00:11:32,000
See, so you can't define one, two, three, four with the characters here.

162
00:11:32,000 --> 00:11:34,000
That is with other languages.

163
00:11:34,000 --> 00:11:39,000
But with PHP, you can define an integer along with other characters as well.

164
00:11:39,000 --> 00:11:43,000
So, this is of character type, this is of int type.

165
00:11:43,000 --> 00:11:48,000
You can define another float value as well inside the array and PHP will not mind it.

166
00:11:48,000 --> 00:11:51,000
It will take that array and it's going to execute its operations on it.

167
00:11:51,000 --> 00:11:57,000
So, the reason why I've given it as index array is because in PHP, we have two types of arrays.

168
00:11:57,000 --> 00:12:04,000
The first one is called as index array where we use indices that is numbers to represent each and every value.

169
00:12:04,000 --> 00:12:08,000
So, here for this array, the first value is given an id of zero.

170
00:12:08,000 --> 00:12:10,000
The second one is given an id of one.

171
00:12:10,000 --> 00:12:13,000
The third one is given an id of three and so on.

172
00:12:13,000 --> 00:12:16,000
So, you have to remember that arrays start from zero.

173
00:12:16,000 --> 00:12:20,000
So, it's going to start from zero, then one, two and three.

174
00:12:20,000 --> 00:12:23,000
So, let's say you want to print out the value of b, right?

175
00:12:23,000 --> 00:12:29,000
So, what I'm going to do is I'm going to type in echo and I'm going to take the variable index underscore array

176
00:12:29,000 --> 00:12:34,000
and I'm going to pass in the value of one and semicolon and save it.

177
00:12:34,000 --> 00:12:40,000
So, the reason why I've given it as one is because I've said it earlier, arrays start from zero.

178
00:12:40,000 --> 00:12:45,000
So, if this value is represented with the number zero, then b is represented with the number one.

179
00:12:45,000 --> 00:12:50,000
So, if you type that and save it and refresh the page, as you can see here, b is being printed.

180
00:12:50,000 --> 00:12:55,000
Now, if I change it to zero and save it and refresh, as you can see here, a is being printed.

181
00:12:55,000 --> 00:13:02,000
So, arrays start from zero and if you keep it as let's say three and save it, so it's going to print one, two, three, four.

182
00:13:02,000 --> 00:13:06,000
So, this is the syntax of printing the elements inside of an array.

183
00:13:06,000 --> 00:13:10,000
So, the second type of arrays that we generally have are called as associative arrays.

184
00:13:10,000 --> 00:13:16,000
So, in other programming languages, they are known as dictionaries or maps or something like that.

185
00:13:16,000 --> 00:13:19,000
In PHP, we refer to them as associative arrays.

186
00:13:19,000 --> 00:13:26,000
So, an associative array is similar to an index array, but instead of having indices, we're going to have key value pairs.

187
00:13:26,000 --> 00:13:42,000
So, it's going to be something like this.

188
00:13:42,000 --> 00:13:45,000
So, this is how we define an associative array.

189
00:13:45,000 --> 00:13:49,000
Here, as you can see here, we have two values representing each and every element, right?

190
00:13:49,000 --> 00:13:54,000
So, this is what is called as a key and this is called as a value.

191
00:13:54,000 --> 00:13:58,000
So, inside of an associative array, we have key value pairs.

192
00:13:58,000 --> 00:14:02,000
So, this whole thing is a single element and this is another element and so on.

193
00:14:02,000 --> 00:14:10,000
So, if you want to print out the values inside of an associative array, you're going to refer to the pencils, that is the key.

194
00:14:10,000 --> 00:14:13,000
So, if you remember in the index arrays, we used Ids, right?

195
00:14:13,000 --> 00:14:19,000
Which were not defined first, but it was defined by the programming language itself and it was given as 0, 1, 2 and 3.

196
00:14:19,000 --> 00:14:21,000
Here, we're defining the values also.

197
00:14:21,000 --> 00:14:26,000
So, we're trying to define the indices and here in the associative array, they are referred to as keys.

198
00:14:26,000 --> 00:14:29,000
So, let's say you want to print out the number of pens.

199
00:14:29,000 --> 00:14:34,000
So, we're going to type in echo.

200
00:14:34,000 --> 00:14:38,000
If you save that and refresh, as you can see here, 10 is being printed.

201
00:14:38,000 --> 00:14:40,000
That's the number of pens that we have.

202
00:14:40,000 --> 00:14:44,000
So, let's say you want to type in erasers.

203
00:14:44,000 --> 00:14:46,000
So, as you can see here, 2 is being printed.

204
00:14:46,000 --> 00:14:52,000
So, associative arrays have key and value pairs and the keys don't necessarily have to be a string.

205
00:14:52,000 --> 00:14:54,000
You can have a number as well.

206
00:14:54,000 --> 00:15:01,000
So, it can be something like, let's say, 1 and the value can be, let's say, test.

207
00:15:01,000 --> 00:15:06,000
You can give it as 2 and the value is going to be, let's say, test 2.

208
00:15:06,000 --> 00:15:10,000
The third one is going to be, let's say, 3 and the value is going to be 2.

209
00:15:10,000 --> 00:15:16,000
If you save that and try to access 1, test is being printed.

210
00:15:16,000 --> 00:15:19,000
So, you can use integers as well to define the elements.

211
00:15:19,000 --> 00:15:23,000
You don't need to necessarily give a string to define the element or the key, so to say.

212
00:15:23,000 --> 00:15:25,000
So, that's it for arrays.

213
00:15:25,000 --> 00:15:27,000
So, now let's jump into loops.

214
00:15:27,000 --> 00:15:28,000
So, what are loops?

215
00:15:28,000 --> 00:15:30,000
So, let's say you have a statement.

216
00:15:30,000 --> 00:15:34,000
It's called, hey this is Kamal and you have to print that string 50 times.

217
00:15:34,000 --> 00:15:35,000
So, what you can do?

218
00:15:35,000 --> 00:15:39,000
You can just type the echo statement 50 times and for each echo statement, you can just give that same string.

219
00:15:39,000 --> 00:15:41,000
But, that's tedious work, right?

220
00:15:41,000 --> 00:15:46,000
So, what you're going to do is you're going to create a loop in which it's going to execute that particular statement 50 number of times.

221
00:15:46,000 --> 00:15:49,000
So, that's the better way of printing the statements, right?

222
00:15:49,000 --> 00:15:52,000
So, in PHP, we have mainly 3 types of loops.

223
00:15:52,000 --> 00:16:05,000
So, the first one is a furl loop and it's something like this.

224
00:16:05,000 --> 00:16:10,000
So, this is the syntax of a furl loop and a furl loop consists of 3 statements.

225
00:16:10,000 --> 00:16:12,000
So, the control flow is something like this.

226
00:16:12,000 --> 00:16:14,000
The value of i is initialized to 0.

227
00:16:14,000 --> 00:16:17,000
Then, it's going to check if i is less than 20.

228
00:16:17,000 --> 00:16:19,000
0 is less than 20, that is true.

229
00:16:19,000 --> 00:16:21,000
So, it's going to echo out that value.

230
00:16:21,000 --> 00:16:23,000
Then, it's going to increment the value of i.

231
00:16:23,000 --> 00:16:28,000
Then, it's going to go and check if that incremented value is less than 20.

232
00:16:28,000 --> 00:16:31,000
Since it was 0, now the value of i has been incremented to 1.

233
00:16:31,000 --> 00:16:33,000
1 is less than 20, that is true.

234
00:16:33,000 --> 00:16:35,000
Then, it's going to echo out the value.

235
00:16:35,000 --> 00:16:37,000
Then, it's going to increment again.

236
00:16:37,000 --> 00:16:39,000
Then, it's going to check the value.

237
00:16:39,000 --> 00:16:41,000
If it is less than 20, it is less than 20.

238
00:16:41,000 --> 00:16:43,000
It's going to echo it again and increment again.

239
00:16:43,000 --> 00:16:48,000
This statement is going to keep on executing till the value of i is equal to 20.

240
00:16:48,000 --> 00:16:51,000
So, now if you save that and go to the browser and refresh.

241
00:16:51,000 --> 00:16:55,000
As you can see here, the numbers have been printed till 19.

242
00:16:55,000 --> 00:16:57,000
That is because we have started it from 0.

243
00:16:57,000 --> 00:17:02,000
If you give it as 1, then you have to give it here as equal to then save it and refresh.

244
00:17:02,000 --> 00:17:05,000
So, it's going to go from 1 to 20.

245
00:17:05,000 --> 00:17:06,000
Right!

246
00:17:06,000 --> 00:17:09,000
So, the second type of loops that we have are known as while loops.

247
00:17:09,000 --> 00:17:11,000
So, the syntax is something like this.

248
00:17:19,000 --> 00:17:25,000
So, what I have written here is that the while loop is going to first check if the value of a is less than value of b.

249
00:17:25,000 --> 00:17:29,000
Initially, the value of a is 20 and the value of b is 20.

250
00:17:29,000 --> 00:17:31,000
Before that, we have to first change the value of 20.

251
00:17:31,000 --> 00:17:34,000
So, I'm going to go to the top and change the value to 10.

252
00:17:34,000 --> 00:17:39,000
At the bottom, now what it's going to do is that it's going to check whether the value of a is less than value of b.

253
00:17:39,000 --> 00:17:42,000
Initially, the value of a is 10 and the value of b is 20.

254
00:17:42,000 --> 00:17:44,000
So, it's going to echo out the value of a.

255
00:17:44,000 --> 00:17:46,000
Then, it's going to increment it by 1.

256
00:17:46,000 --> 00:17:49,000
$a++ implies the value is being incremented by 1.

257
00:17:49,000 --> 00:17:51,000
Here is the same thing as well.

258
00:17:51,000 --> 00:17:55,000
$i++ implies that the value has been increased by 1.

259
00:17:55,000 --> 00:17:58,000
So, now if you see that and go to the browser and refresh the page.

260
00:17:58,000 --> 00:18:06,000
As you can see here, from 10 everything has been printed till 90 because the value we have given it as is less than and not equal to.

261
00:18:06,000 --> 00:18:11,000
If you give it as equal to as well, then save it and refresh the page once again.

262
00:18:11,000 --> 00:18:13,000
20 has been added as well.

263
00:18:13,000 --> 00:18:15,000
So, that's the while loop.

264
00:18:15,000 --> 00:18:18,000
So, the last loop that we're going to look at is known as a for each loop.

265
00:18:18,000 --> 00:18:30,000
So, the syntax for that is something like this.

266
00:18:30,000 --> 00:18:40,000
So, what the statement means is that for each element inside of the sx2 array, take that element as $ar and echo out that value.

267
00:18:40,000 --> 00:18:43,000
So, now if you save this and go to the browser and refresh.

268
00:18:43,000 --> 00:18:48,000
As you can see here, we have the three values that is test, test2 and test2.

269
00:18:48,000 --> 00:18:51,000
So, these were the values that we had defined earlier.

270
00:18:51,000 --> 00:19:01,000
So, it's going to take all the elements inside of the sx2 array as $ar and it's going to print the value associated with the id or with the key so to say.

271
00:19:01,000 --> 00:19:03,000
So, this is the for each loop.

272
00:19:03,000 --> 00:19:06,000
So, the last thing that we're going to look at is form handling.

273
00:19:06,000 --> 00:19:11,000
So, to actually explain form handling, we need a form inside of HTML page.

274
00:19:11,000 --> 00:19:28,000
So, I'm going to create that now.

275
00:19:28,000 --> 00:19:40,000
Okay, so what I've done here is that I've created a file called as index.php and if you observe, I've given the extension .php and as I mentioned earlier, you can write HTML inside of PHP as well and that is going to work.

276
00:19:40,000 --> 00:19:53,000
So, now inside this index page, what I've done is that I've created the basic boiler template and in that, I've created a dummy form and in that form, I've created a single input tag and below that, I have a button which says click me.

277
00:19:53,000 --> 00:20:03,000
So, for the input, I've given it a name property called as username and for the form, I've given it an action property called as practice.php.

278
00:20:03,000 --> 00:20:16,000
So, when you click on this button, what's going to happen is that the data is being taken from the input tag and being assigned to a name called as username and then it is being sent to the practice.php using the method get.

279
00:20:16,000 --> 00:20:21,000
So, there are actually four types of methods that we generally use but for this video, two are enough.

280
00:20:21,000 --> 00:20:25,000
The first one is the get method and the second one is the post method.

281
00:20:25,000 --> 00:20:33,000
So, we're going to first see the get method. So, now if you save this and go to the browser and go to index.php.

282
00:20:33,000 --> 00:20:39,000
So, now we have this form right. So, if I type in let's say camel and click me.

283
00:20:39,000 --> 00:20:52,000
As you can see here in the browser, automatically index.php has been removed and it has been redirected to practice.php and also a variable called as username has been assigned a value called as camel which was defined by me.

284
00:20:52,000 --> 00:20:59,000
So, now we have the data present inside the URL. Now, we have to take the data and do something with it right.

285
00:20:59,000 --> 00:21:17,000
So, now let's go to the practice page and here below everything else, what we're going to do is that we're going to write an if statement and it's going to be something like this.

286
00:21:17,000 --> 00:21:30,000
So, what I'm doing here is that I'm checking if this username variable is being set inside the URL and that too we're explicitly checking if a get method is being used to set this username variable.

287
00:21:30,000 --> 00:21:41,000
And as you can see here in the form use the get method and we actually gave an input as username and we actually got the data inside the URL which is being equal or being assigned to username.

288
00:21:41,000 --> 00:21:47,000
So, now if you refresh the page, the data is being taken from the username and it is being printed right.

289
00:21:47,000 --> 00:21:54,000
So, let's see if I give it as the second method that is post and save it.

290
00:21:54,000 --> 00:22:00,000
Now, if you go back, so I'm going to type the same thing again and click me.

291
00:22:00,000 --> 00:22:04,000
So, now as you can see here the data is not being passed to the URL.

292
00:22:04,000 --> 00:22:15,000
So, there is nothing after practice.php but if you go to the practice page and remove this get and type in post and also change this as well.

293
00:22:15,000 --> 00:22:21,000
Now, if I save this and go to the browser and refresh, click on continue.

294
00:22:21,000 --> 00:22:26,000
As you can see here the data is being printed but there is no data inside the URL.

295
00:22:26,000 --> 00:22:30,000
That means the data is being passed but it has been hidden.

296
00:22:30,000 --> 00:22:36,000
So, we generally use get or post methods to pass data in between files inside of PHP.

297
00:22:36,000 --> 00:22:43,000
So, this is how you take the data from a form and pass it to another PHP file and do some operations with it.

298
00:22:43,000 --> 00:22:47,000
So, this is generally how a login form or a signup form or a contact me form works.

299
00:22:47,000 --> 00:22:59,000
Generally take the data from this and pass it here and instead of echoing out we generally type in some SQL queries where it's going to take the data and push it onto the database where you have a login table.

300
00:23:00,000 --> 00:23:03,000
And all the data has been stored there.

301
00:23:03,000 --> 00:23:10,000
So, apart from get and post we also have another method here which is called as request.

302
00:23:10,000 --> 00:23:15,000
So, we generally use request only when we have no idea how we are passing the data.

303
00:23:15,000 --> 00:23:24,000
So, let's say you are given it as post but let's say you have many forms inside your website and you actually have no idea what method you are actually using to send the data through the URL.

304
00:23:24,000 --> 00:23:28,000
Then what you can do is you can give it request and it's going to accept get or post as well.

305
00:23:28,000 --> 00:23:35,000
So, as you can see here it's an associative array that by default contains the contents of get, post and cookie as well.

306
00:23:35,000 --> 00:23:37,000
So, it's going to accept all of these three.

307
00:23:37,000 --> 00:23:44,000
So, now if you save this and go to the browser and refresh the same thing is being printed that means it is still working.

308
00:23:44,000 --> 00:23:48,000
So, that's how you take the data from the form and print it out.

309
00:23:48,000 --> 00:23:53,000
So, post is used when you actually have to send sensitive data like username and passwords.

310
00:23:53,000 --> 00:23:58,000
And get is used when you have to pass data which is not required any prediction at all.

311
00:23:58,000 --> 00:24:03,000
Yeah, and one more thing is that actually forgot one concept inside of PHP.

312
00:24:03,000 --> 00:24:07,000
So, the last thing that we are going to cover is we are going to use functions.

313
00:24:07,000 --> 00:24:15,000
So, a function is like a block of code that you can write independently and you can execute it as many times as you want.

314
00:24:15,000 --> 00:24:25,000
So, the syntax of function is something like this.

315
00:24:25,000 --> 00:24:29,000
Okay, so there is something wrong with my editor that's why it's showing this red line.

316
00:24:29,000 --> 00:24:32,000
But anyway, so this is the syntax for writing a function inside PHP.

317
00:24:32,000 --> 00:24:39,000
So, what I've done here is that I've defined a keyword called as function and beside that I've given the name for the function.

318
00:24:39,000 --> 00:24:42,000
And inside the function what I've written is that hey this is coming.

319
00:24:42,000 --> 00:24:47,000
So, if you want to execute this particular set of code what you have to do is that you have to call this function.

320
00:24:47,000 --> 00:24:54,000
What I'm doing here is that below this I've just written that and if you just write the statement here that means you are trying to call this function.

321
00:24:54,000 --> 00:25:00,000
And as soon as this function is called it's going to go in and execute whatever is present inside this function.

322
00:25:00,000 --> 00:25:05,000
So, if you save this and go to the browser and refresh the page as you can see here.

323
00:25:05,000 --> 00:25:09,000
So, the text is being shown that means the function is being executed.

324
00:25:09,000 --> 00:25:17,000
So, this is how you generally define functions and functions are very useful when you have to execute a particular code multiple number of times.

325
00:25:17,000 --> 00:25:22,000
I'm not talking about loops but I'm talking about reusable codes.

326
00:25:22,000 --> 00:25:28,000
So, if you write a logic inside of a function and if you want to use that logic anywhere inside of your PHP project.

327
00:25:28,000 --> 00:25:33,000
What you can do is that you can just call the function and as soon as that is called it's going to execute whatever is there inside the function.

328
00:25:33,000 --> 00:25:36,000
And that is generally the logic that you have written before.

329
00:25:36,000 --> 00:25:41,000
So, those were the basics of PHP and I know that I haven't touched all the topics in PHP itself.

330
00:25:41,000 --> 00:25:48,000
But believe me this is more than enough for you to know if you want to create a simple website using PHP with integration of backend and frontend as well.

331
00:25:48,000 --> 00:25:50,000
So, these concepts will be enough for you.

332
00:25:50,000 --> 00:25:56,000
But if you want to create something which is much more advanced and you have to learn some more concepts and this is like just the tip of the iceberg.

333
00:25:56,000 --> 00:26:05,000
There are many more concepts that you have to learn but if you want to get started this is more than enough and these concepts will be enough for you to create a simple website.

334
00:26:05,000 --> 00:26:08,000
So, there is one last tip before ending this video.

335
00:26:08,000 --> 00:26:12,000
So, instead of writing all the PHP code inside of a separate file.

336
00:26:12,000 --> 00:26:21,000
What you can do is that you can just take the data from the PHP and remove that from there and paste it inside the main index page itself.

337
00:26:24,000 --> 00:26:26,000
So, let's say you have this form right.

338
00:26:26,000 --> 00:26:31,000
So, if you want to actually execute this what you have to do is that you have to create another file called as practice.php.

339
00:26:31,000 --> 00:26:35,000
And in that file you have to specify the logic that you want to use.

340
00:26:35,000 --> 00:26:39,000
But instead of doing that what you can do is that you can just remove this action itself.

341
00:26:39,000 --> 00:26:46,000
And what's going to happen is that whenever you click on this click me automatically the data is being sent to the same page.

342
00:26:46,000 --> 00:26:50,000
That is the execution is going to start and end in the index page.

343
00:26:50,000 --> 00:27:00,000
So, since the PHP is already present inside the index page that is above the HTML automatically when you click on this it's going to go to this function and it's going to execute this.

344
00:27:00,000 --> 00:27:10,000
So, now if you go to the browser and let's say you go to index page and you type in let's say my name and click me.

345
00:27:10,000 --> 00:27:15,000
As you can see here the data is being printed in the index page right.

346
00:27:15,000 --> 00:27:23,000
So, the data can also be written inside the index page and you don't have to create another file to execute the form itself.

347
00:27:23,000 --> 00:27:28,000
So, that's a pro tip that will help you guys a lot when you're trying to execute forms inside your web page.

348
00:27:28,000 --> 00:27:32,000
If you like this video then please hit the like button and don't forget to subscribe as well.

349
00:27:32,000 --> 00:27:35,000
Thanks so much for watching and I hope to see you in the next video.

